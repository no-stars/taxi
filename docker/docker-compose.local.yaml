version: "3.9"

services:
#  rabbitmq-local:
#    container_name: ${PROJECT_NAME}-rabbit-local
#    build: ./images/rabbitmq
##    hostname: rabbitmq
##    restart: always
#    environment:
#      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
#      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
##      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
##    volumes:
##      - ./rabbitmq:/var/lib/rabbitmq
#    ports:
#      - ${RABBITMQ_GUI_PORT}:15672
#      - ${RABBITMQ_AMQP_PORT}:5672

#  zookeeper:
#    image: wurstmeister/zookeeper
#    ports:
#      - "2181:2181"
#  kafka:
#    build: .
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_ADVERTISED_HOST_NAME: docker.for.mac.localhost
#      KAFKA_ADVERTISED_PORT: 9092
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock

  gateway:
    container_name: gateway
    build:
      context: ../../apps/gateway
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ../../:/usr/src/app
      - /usr/src/app/node_modules
    restart: 'unless-stopped'
#    depends_on:
#      - sovcombank-postgres
    networks:
      - backend

#  postgres-local:
#    container_name: ${PROJECT_NAME}-postgres-local
#    build: ./images/postgres
#    environment:
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_DB: ${POSTGRES_DB}
#      PGDATA: ${PGDATA}
#    volumes:
#      - pgdata:${PGDATA}
#    ports:
#      - ${POSTGRES_PORT}:5432
#    networks:
#      - pgadmin
#
#  pgadmin-local:
#    container_name: ${PROJECT_NAME}-pgadmin-local
#    build: ./images/pgadmin
#    environment:
#      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
#      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
#    volumes:
#      #      - pgadmin:/root/.pgadmin
#      - pgadmin:/var/lib/pgadmin
#    ports:
#      - ${PGADMIN_PORT}:80
#    networks:
#      - pgadmin

networks:
  backend:
  pgadmin:

volumes:
  pgdata:
  pgadmin:
